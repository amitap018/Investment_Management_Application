@model IPagedList<Login.Models.Order>

@using PagedList.Core.Mvc
@using PagedList.Core
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;

@{
    ViewData["Title"] = "User Orders";

    var transactionType = ViewContext.HttpContext.Request.Query["transactionType"].ToString();
    var isSip = ViewContext.HttpContext.Request.Query["isSip"].ToString();
    var startDate = ViewContext.HttpContext.Request.Query["startDate"].ToString();
    var endDate = ViewContext.HttpContext.Request.Query["endDate"].ToString();
    //var userId = ViewContext.HttpContext.Request.Query["userId"].ToString(); // Retrieve userId from query string
    var userId = Convert.ToInt64(User.FindFirstValue(ClaimTypes.NameIdentifier));

    var fundLogos = new Dictionary<string, string>
    {
        { "Mid-Cap Equity Fund", Url.Content("~/Images/mid_cap_equity_fund.png") },
        { "High-Cap Debt Fund", Url.Content("~/Images/high_cap_debt_fund.png") },
        { "Balanced Fund", Url.Content("~/Images/balanced_fund.png") },
        { "Low-Cap Equity Fund", Url.Content("~/Images/low_cap_equity_fund.png") },
        { "Global Debt Fund", Url.Content("~/Images/global_debt_fund.png") },
        { "High-Cap Balanced Fund", Url.Content("~/Images/high_cap_balanced_fund.png") },
        { "Low-Cap Debt Fund", Url.Content("~/Images/low_cap_debt_fund.png") },
        { "Mid-Cap Balanced Fund", Url.Content("~/Images/mid_cap_balanced_fund.png") },
        { "Global Equity Fund", Url.Content("~/Images/global_equity_fund.png") },
        { "Mid-Cap Debt Fund", Url.Content("~/Images/mid_cap_debt_fund.png") }
    };
}

<style>
    /* Your existing CSS */
    .reduced-space {
        margin-bottom: 0 !important;
        margin-right: 1rem; /* Adjust the right margin as needed */
        margin-left: 4.5rem;
    }

    .view {
        margin-left: 10px;
    }

    .hy {
        .margin-top:-5px !important;
    }

    .hh {
        margin-top: -23px !important;
    }

    .typec {
        margin-right: 100px;
    }

    .inner-container {
        background-color: white;
        padding: 10px;
        margin-left: 3rem;
        margin-right: 3rem;
        padding-left: 2rem;
        padding-right: 2rem;
        border-radius: 8px;
    }

    main {
        padding: 10px;
        margin-left: 3rem;
        margin-right: 3rem;
        margin-top: -1rem;
        padding-left: 2rem;
        padding-right: 2rem;
        border-radius: 8px;
    }

    .card {
        height: 6.4rem;
        padding: 5px;
        margin-top: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Shadow for the card */
        transition: transform 0.2s, box-shadow 0.2s; /* Smooth transition for hover effects */
    }

        .card:hover {
            transform: scale(1.05); /* Scale up the card slightly on hover */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Increase shadow on hover */
        }

    .details-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .filters-div {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .button-container {
        margin-top: -0.7rem;
        margin-left: 18rem;
    }

    .custom-button {
        background-color: #155454;
        color: white;
        border: none;
        transition: background-color 0.2s;
    }

        .custom-button:hover {
            background-color: #367777;
            color: white;
        }
</style>
<body>

    <h2>User Orders</h2>

    <!-- Filter Form -->
    <form id="filterForm" method="get" asp-action="UserOrders" class="row align-items-end filters-div">
        <input type="hidden" name="userId" value="@userId" />
        <div class="form-group col-md-2 text-center d-flex align-items-center">
            <p style="margin-left:4rem; font-size:1.2rem">Filters</p>
            <img src="~/Images/filter.png" alt="Filter Icon" class="me-2" style="width: 50px; height: 50px; display: block; margin: 0 auto;">
        </div>
        <div class="form-group col-md-2">
            <label for="transactionType">Transaction Type</label>
            <select name="transactionType" id="transactionType" class="form-control">
                <option value="Buy" selected="@(transactionType == "Buy" ? new { selected = "selected" } : null)">Buy</option>
                <option value="Sell" selected="@(transactionType == "Sell" ? new { selected = "selected" } : null)">Sell</option>
                <option value="" selected="@(string.IsNullOrEmpty(transactionType) ? new { selected = "selected" } : null)">All</option>
            </select>
        </div>
        <div class="form-group col-md-2">
            <label for="isSip">Is SIP</label>
            <select name="isSip" id="isSip" class="form-control">
                <option value="true" selected="@(isSip == "true" ? new { selected = "selected" } : null)">SIP</option>
                <option value="false" selected="@(isSip == "false" ? new { selected = "selected" } : null)">Lumpsum</option>
                <option value="" selected="@(string.IsNullOrEmpty(isSip) ? new { selected = "selected" } : null)">All</option>
            </select>
        </div>
        <div class="form-group col-md-2">
            <label for="startDate">Start Date</label>
            <input type="date" name="startDate" id="startDate" class="form-control" value="@startDate" />
        </div>
        <div class="form-group col-md-2">
            <label for="endDate">End Date</label>
            <input type="date" name="endDate" id="endDate" class="form-control" value="@endDate" />
        </div>
        <div class="form-group col-md-2 d-flex align-items-end">
            <button type="submit" formaction="@Url.Action("DownloadUserOrdersPdf", new { userId = userId })" class="btn custom-button">Download PDF</button>
        </div>
    </form>

    <div class="row mt-3">
        @foreach (var order in Model)
        {
            var fundLogo = fundLogos.ContainsKey(order.MutualFund.FundName) ? fundLogos[order.MutualFund.FundName] : "~/Images/default_fund_logo.png"; // Default logo if not found
            var transactionColor = order.TransactionType == "Buy" ? "green" : "orange";
            <div class="col-md-12">
                <div class="card mb-2" style="padding: 10px;">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <div class="d-flex  hyalign-items-center">
                            <img src="@fundLogo" alt="@order.MutualFund.FundName Logo" style="width: 45px; height: 45px; margin-right: 10px;">
                            <h5 class="card-title mb-0" style="font-size: 1.2rem; font-weight: bold;">
                                @order.MutualFund.FundName
                            </h5>
                        </div>
                        <span class="card-text typec" style="color:@transactionColor; margin-top:-1.2rem;font-weight: bold;font-size: 1.2rem;">@order.TransactionType</span>
                    </div>
                    <div class="d-flex  mb-1 mt-1 hh">
                        <p class="card-text reduced-space"><strong>Order Date:</strong> @order.Timestamp.ToString("yyyy-MM-dd")</p>
                        <p class="card-text reduced-space"><strong>Amount:</strong> @order.Amount</p>
                        <p class="card-text reduced-space"><strong>Units:</strong> @order.Units</p>
                        <div class="button-container">
                            <a asp-action="OrderDetails" asp-route-id="@order.OrderId" class="btn  custom-button btn-sm">View</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-center mt-3">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("UserOrders", new { page = Model.PageNumber - 1, transactionType, isSip, startDate, endDate, userId })">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li>
            }

            @for (int i = 1; i <= Model.PageCount; i++)
            {
                if (i == Model.PageNumber)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("UserOrders", new { page = i, transactionType, isSip, startDate, endDate, userId })">@i</a>
                    </li>
                }
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("UserOrders", new { page = Model.PageNumber + 1, transactionType, isSip, startDate, endDate, userId })">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }
        </ul>
    </div>
</body>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var filterForm = document.getElementById("filterForm");

        filterForm.querySelectorAll("select, input[type='date']").forEach(function (element) {
            element.addEventListener("change", function () {
                filterForm.submit();
            });
        });
    });
</script>

